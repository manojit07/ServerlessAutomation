service: satsang-backend
frameworkVersion: ">3.0.0"

# Stage parameters
params:
  # Values for the "prod" stage
  prod:
    my-parameter: foo
  # Values for the "dev" stage
  dev:
    my-parameter: bar
provider:
  name: aws
  region: ap-south-1

  runtime: nodejs18.x  
  stage: ${opt:stage,'dev'}	
  iam:
    role: arn:aws:iam::773103429818:role/satsang-demo-lambda
  deploymentPrefix: sls-demo
  deploymentBucket:
    # Name of an existing bucket to use (default: created by serverless)
    name: dummy.serverless.${self:provider.stage}.deploys.satsang
    # On deployment, serverless prunes artifacts older than this limit (default: 5)
    maxPreviousDeploymentArtifacts: 10
    # Prevents public access via ACLs or bucket policies (default: false)
    # Note: the deployment bucket is not public by default. These are additional ACLs.
    blockPublicAccess: true
    # Skip the creation of a default bucket policy when the deployment bucket is created (default: false)
    skipPolicySetup: true
    # Enable bucket versioning (default: false)
    versioning: true
    # Server-side encryption method
    serverSideEncryption: AES256

  memorySize: 512
  # Default timeout for functions (default: 6 seconds)
  # Note: API Gateway has a maximum timeout of 30 seconds
  timeout: 10

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"


# # Environment Variables
#   environment:
#     MYSQL_HOST: ${self:custom.mysqlHost.${self:provider.stage}}
#     MYSQL_USER: ${self:custom.mysqlUser.${self:provider.stage}}
#     MYSQL_PASSWORD: ${self:custom.mysqlPassword.${self:provider.stage}}
#     MYSQL_DATABASE: ${self:custom.mysqlDatabase.${self:provider.stage}}
#     MYSQL_PORT: ${self:custom.mysqlPort.${self:provider.stage}}

# Custom Variables
custom:
  stages:
    - develop
    - staging
    - prod
  mysqlHost:
    local: localhost
    dev: devdb.example.com
    staging: ${ssm:/myapp/staging/mysql-host} #get from ssm
    prod: ${ssm:/myapp/prod/mysql-host} #get from ssm
  # mysqlHost:
  #   local: localhost
  #   dev: devdb.example.com
  #   staging: ${ssm:/myapp/staging/mysql-host} #get from ssm
  #   prod: ${ssm:/myapp/prod/mysql-host} #get from ssm
  # mysqlUser:
  #   local: root
  #   dev: myapp_devuser
  #   staging: myapp_stag
  #   prod: myapp
  # mysqlPassword:
  #   local: root
  #   dev: ${ssm:/myapp/dev/mysql-password~true} #get from ssm (secure)
  #   staging: ${ssm:/myapp/staging/mysql-password~true} #get from ssm (secure)
  #   prod: ${ssm:/myapp/prod/mysql-password~true} #get from ssm (secure)
  # mysqlDatabase:
  #   local: myapp_testdb
  #   dev: myapp_dev
  #   staging: myapp_staging
  #   prod: myapp_prod
  # mysqlPort:
  #   local: '8889'
  #   dev: '3306'
  #   staging: '3306'
  #   prod: '3306'
# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  app-api:
    handler: handler.handler
    events:
      - http:
          path: /
          method: get
          cors: true
      - http:
          path: /{proxy+}
          method: any
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2


# Plugins
# plugins:
#   - serverless-stage-manager


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
